Requirement Diagram Syntax:

- Requirement: `<type> user_defined_name { id: user_defined_id text: user_defined_text risk: <risk> verifymethod: <method> }`
- Element: `element user_defined_name { type: user_defined_type docref: user_defined_ref }`
- Relationship: `{name of source} - <type> -> {name of destination}` or `{name of destination} <- <type> - {name of source}`
- Valid options for `<type>` in requirement: requirement, functionalRequirement, interfaceRequirement, performanceRequirement, physicalRequirement, designConstraint
- Valid options for `<risk>`: Low, Medium, High
- Valid methods for `<method>`: Analysis, Inspection, Test, Demonstration
- Valid options for `<type>` in relationship: `contains`, `copies`, `derives`, `satisfies`, `verifies`, `refines`, `traces`

For example:

requirementDiagram

requirement test_req {
id: 1
text: the test text.
risk: high
verifymethod: test
}

functionalRequirement test_req2 {
id: 1.1
text: the second test text.
risk: low
verifymethod: inspection
}

performanceRequirement test_req3 {
id: 1.2
text: the third test text.
risk: medium
verifymethod: demonstration
}

interfaceRequirement test_req4 {
id: 1.2.1
text: the fourth test text.
risk: medium
verifymethod: analysis
}

physicalRequirement test_req5 {
id: 1.2.2
text: the fifth test text.
risk: medium
verifymethod: analysis
}

designConstraint test_req6 {
id: 1.2.3
text: the sixth test text.
risk: medium
verifymethod: analysis
}

element test_entity {
type: simulation
}

element test_entity2 {
type: word doc
docRef: reqs/test_entity
}

element test_entity3 {
type: "test suite"
docRef: github.com/all_the_tests
}


test_entity - satisfies -> test_req2
test_req - traces -> test_req2
test_req - contains -> test_req3
test_req3 - contains -> test_req4
test_req4 - derives -> test_req5
test_req5 - refines -> test_req6
test_entity3 - verifies -> test_req5
test_req <- copies - test_entity2